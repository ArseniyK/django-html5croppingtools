{"name":"Html5croppingtools","tagline":"","body":"#  Installation\r\n    run  pip install django-html5croppingtools\r\n\r\n#  Configure settings.py:\r\n     Add html5croppingtools to INSTALLED_APPS\r\n\r\n\r\n#  manage.py\r\n     run manage.py collectstatic\r\n\r\n# Examples\r\n\r\n### Admin example without saving original image\r\n\r\n``` python\r\n        #models.py\r\n        class MyModel(models.Model):\r\n            ...\r\n            image = models.ImageField(upload_to='<upload path>')\r\n            ...\r\n\r\n        #admin.py\r\n        ....\r\n        from html5croppingtools.fields import CropImageField\r\n        from html5croppingtools.forms import CropImageFormMixin\r\n        ....\r\n\r\n        class MyModelForm(CropImageFormMixin, ModelForm):\r\n            \"\"\"\r\n            :param max_size maximum size of image width or height(depends on which is greater) in pixels\r\n            :param width_ratio and height_ratio using this two parameters code calculates ratio\r\n                   between width and height of image and helps when selecting cropping area in admin by fixing ratio between sides\r\n            \"\"\"\r\n            image = CropImageField(max_size=900, width_ratio=500,height_ratio=300)\r\n            ....\r\n\r\n\r\n        @admin.register(MyModel)\r\n        class MyModelAdmin(admin.ModelAdmin):\r\n            form = MyModel\r\n            ....\r\n```\r\n\r\n### Admin example with saving original image\r\n``` python \r\n        ...\r\n        class MyModel(models.Model):\r\n                ...\r\n                image = models.ImageField(upload_to='<upload path>')\r\n                original_image = models.ImageField(upload_to='<upload path>')\r\n                ...\r\n        ...\r\n        class MyModelForm(CropImageFormMixin, ModelForm):\r\n            \"\"\"\r\n            :param original_field name of corresponding model's field where you want to save original image\r\n            \"\"\"\r\n            image = CropImageField(\r\n                original_field='original_image', max_size=900,\r\n                width_ratio=500, height_ratio=300,\r\n            )\r\n            ....\r\n````\r\n# On the fly cropping\r\n### Add html5croppingtools.imagecrop.ImageCropMiddleware to MIDDLEWARE_CLASSES\r\n    after adding html5croppingtools.imagecrop.ImageCropMiddleware to MIDDLEWARE_CLASSES\r\n    you can add \"quality=<int>&dimensions=<int x1 >x<int y1 >x<int x2 >x<int y2>\" this parameters to GET querystring\r\n    and middleware will serve corresponding image cropped and resized\r\n\r\n### Middleware working steps:\r\n1.  If \"quality\" is supplied, image will be resized\r\n1.  If crop \"dimensions\" are supplied, image will be cropped\r\n\r\n**Note:** \"dimensions\" and \"quality\" parameters are optional\r\n\r\n#    Example\r\n/media/image/my_image_guid.jpeg?quality=1200&dimensions=300x200x900x800\r\n\r\n1. middleware will  resize image proportionally making It's bigger side equal to 1200 pixels\r\n1. after shrinking it will crop  x1=300 y1=200 x2=900 y2=800 rectangle\r\n\r\n#    Template example\r\n```html\r\n{% load croppingtools_extra %}\r\n<img src=\"{% html5crop MyModel.image dimensions='100x100x300x300' quality=500 %}\">\r\n```\r\n\r\ntakes \"ImageFiled\", \"dimensions\" and \"quality\" parameters and\r\nreturns url \"/media/image/my_image_guid.jpeg?quality=500&dimensions=100x100x300x300\"\r\nafter what middleware will serve cropped and resized image\r\n\r\n**Note:** \"dimensions\" and \"quality\" parameters are optional","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}